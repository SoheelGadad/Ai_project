import cv2
import numpy as np
import pandas as pd
import argparse
import tkinter as tk
from tkinter import filedialog

# Creating argument parser to take image path from command line
ap = argparse.ArgumentParser()
ap.add_argument('-i', '--image', required=False, help="Image Path")
args = vars(ap.parse_args())

root = tk.Tk()
root.withdraw()

# Open file dialog to select an image
file_path = filedialog.askopenfilename()

if file_path:
    img_path = file_path
elif args["image"]:
    img_path = args["image"]
else:
    print("Please provide an image path")

# Reading the image with opencv
img = cv2.imread(img_path)

# Declaring global variables (are used later on)
clicked = False
r = g = b = xpos = ypos = 0

# Reading csv file with pandas and giving names to each column
index = ["color", "color_name", "hex", "R", "G", "B"]
csv = pd.read_csv('colors.csv', names=index, header=None)

# Function to calculate minimum distance from all colors and get the most matching color
def getColorName(R, G, B):
    minimum = 10000
    for i in range(len(csv)):
        d = abs(R - int(csv.loc[i, "R"])) + abs(G - int(csv.loc[i, "G"])) + abs(B - int(csv.loc[i, "B"]))
        if(d <= minimum):
            minimum = d
            cname = csv.loc[i, "color_name"]
    return cname

# Function to get x,y coordinates of mouse click
def draw_function(event, x, y, flags, param):
    if event == cv2.EVENT_MOUSEMOVE:
        global b, g, r
        b, g, r = img[y, x]
        b = int(b)
        g = int(g)
        r = int(r)
        color_scanner = np.zeros((100, 100, 3), np.uint8)
        color_scanner[:, :] = (b, g, r)
        cv2.imshow('color_scanner', color_scanner)

cv2.namedWindow('image')
cv2.setMouseCallback('image', draw_function)

# Adding Zoom functionality
while(1):
    # Create a scaled copy of the image based on zoom level
while(1):
# Create a scaled copy of the image based on zoom level
max_size = 800 # maximum size of the image
scale_percent = min(max_size / img.shape[1], max_size / img.shape[0]) * 100
width = int(img.shape[1] * scale_percent / 100)
height = int(img.shape[0] * scale_percent / 100)
dim = (width, height)
scaled_img = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)
cv2.imshow("image",scaled_img)
if clicked:
    cv2.rectangle(img, (20, 20), (750, 60), (b, g, r), -1)
    text = getColorName(r, g, b) + ' R=' + str(r) + ' G=' + str(g) + ' B=' + str(b)
    font = cv2.FONT_HERSHEY_SIMPLEX
    font_scale = 10
    thickness = 2
    text_size = cv2.getTextSize(text, font, font_scale, thickness)[0]
    text_x = 50
    text_y = 50
    if text_x + text_size[0] >= img.shape[1]:
        text_x = img.shape[1] - text_size[0] - 10
    if text_y + text_size[1] >= img.shape[0]:
        text_y = img.shape[0] - text_size[1] - 10
    cv2.putText(img, text, (text_x, text_y), font, font_scale, (255, 255, 255), thickness, cv2.LINE_AA,)
    if (r + g + b >= 600):
        cv2.putText(img, text, (50, 50), 2, 0.8, (0, 0, 0), 2, cv2.LINE_AA)

# Implementing Image color scanner
if cv2.waitKey(20) & 0xFF == 32:  # Wait for Space Bar to be pressed
    cv2.destroyAllWindows()
    h, w, _ = img.shape  # Getting the height and width of the image
    color_scan = np.zeros([h, w, 3], dtype=np.uint8)  # Creating an empty image for the color scan result
    color_scan[:, :, :] = img[ypos - 10:ypos + 10, xpos - 10:xpos + 10, :]  # Filling the color scan image with selected pixels

    # Displaying the color scan result
    cv2.imshow("Color Scan Result", color_scan)

# Adding Zoom functionality
key = cv2.waitKey(1)
if key == ord('+'): # Zoom in
    img = cv2.resize(img, None, fx=1.1, fy=1.1, interpolation=cv2.INTER_LINEAR)
elif key == ord('-'): # Zoom out
    img = cv2.resize(img, None, fx=0.9, fy=0.9, interpolation=cv2.INTER_LINEAR)

#Break the loop when user hits 'esc' key    
if key == 27: # 'esc' key
    break
elif cv2.getWindowProperty('image', cv2.WND_PROP_VISIBLE) < 1: # window closed by user
    break
cv2.destroyAllWindows()
